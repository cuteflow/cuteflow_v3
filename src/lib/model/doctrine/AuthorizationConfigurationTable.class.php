<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AuthorizationConfigurationTable extends Doctrine_Table
{

    /**
     * create new instance of AuthorizationConfiguration
     * @return object AuthorizationConfiguration
     */
    public static function instance()
    {
        return Doctrine::getTable('AuthorizationConfiguration');
    }


    /**
     * Load Workflowconfiguration
     * @param string $orderby, orderby if needed
     * @return Doctrine_Collection
     */
    public function getAuthorizationConfiguration($allRoles = true)
    {
        $query = Doctrine_Query::create()
                ->from('AuthorizationConfiguration ac');

        if ($allRoles == false) {
            $query->where('ac.type != ?', 'allroles');
        }

        return $query->execute();
    }


    public function getAllRoles($limit = null)
    {
        $allRoles = Doctrine_Query::create()
                ->from('AuthorizationConfiguration ac')
                ->where('ac.type = ?', 'allroles');

        if ($limit) {
            $allRoles = $allRoles->limit($limit);
        }
        return $allRoles->execute();
    }


    /**
     * Update table items for AuthorizationConfiguration
     * @param int $id, id of the row to update
     * @param string $column, column of the tablerow which is to update
     * @return true;
     */
    public function updateAuthorizationConfigurationById($id, $column)
    {
        Doctrine_Query::create()
                ->update('AuthorizationConfiguration ac')
                ->set('ac.' . $column, '?', 1)
                ->where('ac.id = ?', $id)
                ->execute();
        return true;
    }


    /**
     * set all Columns to 0
     * @return true
     */
    public function setAuthorizationConfigurationToNull()
    {
        Doctrine_Query::create()
                ->update('AuthorizationConfiguration ac')
                ->set('ac.delete_workflow', '?', 0)
                ->set('ac.archive_workflow', '?', 0)
                ->set('ac.stop_new_workflow', '?', 0)
                ->set('ac.details_workflow', '?', 0)
                ->execute();
        return true;
    }


}